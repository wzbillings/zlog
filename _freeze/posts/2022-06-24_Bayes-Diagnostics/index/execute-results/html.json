{
  "hash": "d0741b3881122832f7f66b43aa035053",
  "result": {
    "markdown": "---\ntitle: \"Multiple diagnostic testing and Bayes' rule\"\nauthor: \"Zane Billings\"\ndate: \"2022-06-24\"\ndescription: |\n  When you do multiple diagnostic tests in sequence, how do you estimate your\n  probability of the condition?\nlicense: \"CC BY SA\"\n---\n\n\n\n\n\nPic related: this morning a coworker let me know they had tested positive for COVID-19! As someone who actually prefers to go into the office, I knew that this was one of the dangers, so I was at least prepared for this to happen. I grabbed my government-mailed COVID-19 rapid tests from the closet, checked the expiration date, sat down at the table, and...remembered that flu rapid tests have high false positive rates. Admittedly, I know much more about flu diagnostic testing than COVID.\n\nThe package insert for the Abbott BinaxNOW tests alleges a 91.7% sensitivity (95% CI: 73.0% - 98.9%), but with the 73% lower bound and my skeptical nature, I decided I better go ahead and do two tests. Of course, being a math degree holder, I can certainly work out for myself how to use Bayes' Rule to update my beliefs about my COVID status after seeing two tests, but I decided to google it to see if there are any quick and easy guides. And of course, most of what I found in the top google results were articles that didn't really have much content. So, given the advice I've recieved from [Andreas Handel](https://andreashandel.com) and [Andrew Heiss](https://andrewheiss.com), I decided to write up my very first blog post about this subject. Finally, a subject where I feel confident enough to write a blog post about it.\n\n## Diagnostic test sensitivity and specificity\n\nEvery diagnostic test that produces a dichotomous outcome (for example, COVID-19 positive vs. COVIC-19 negative) has some margin of error. When the test gives you a positive diagnosis, it never means a 100% chance that you are positive. Instead, the test has a probability of being positive, given that you actually have the disease. This probability is called the **sensitivity** of the test. In math notation, we would write\n\n$$\\mathrm{sensitivity} = P\\left(+ \\mid D\\right)$$\n\nwhere $D$ is the event that you have the disease (we'll call the event that you don't have the disease $\\lnot D$) and $+$ is the event that you have a positive test (we'll call the event you have a negative test $-$). Note that there are only four possibilities with this kind of test.\n\n1. **True positive:** You actually have the disease, and you test positive.\n2. **False positive:** You *don't* have the disease, but you test positive.\n3. **False negative:** You actually have the disease, but you test negative.\n4. **True negative:** You *don't* have the disease, and you test negative.\n\nUsing these definitions, the sensitivity of the test is also called the \"true positive rate\". Similarly, there is another metric for the test called the **specificity**, which is  called the \"true negative rate\" and represents the probability that you test negative, given that you do not have the disease. Mathematically, we would write\n\n$$\\mathrm{specificity} = P(- \\mid \\lnot D).$$\n\n\nThese quantities are **intrinsic** to the test. Theoretically, every type of diagnostic test has a true sensitivity and specificity that we can estimate by using the test on people whose disease status we know. In the US, the companies that make these tests are required to do these studies before their products can be approved by the FDA.\n\nFor the rest of this blog post, we'll use the slightly more conservative numbers provided in the package insert: in a multi-site clinical study, the test was estimated to have a sensitivity of 85% and a specificity of 99% (rounding to the nearest percentage).\n\nHowever, the sensitivity and specificity don't tell us the information that we actually want to know. What I want to know is, **given that I tested negative, what is the probability that I do not have COVID-19?**\n\n## Bayes' Rule and the PPV/NPV\n\nIn math notation, the quantity that we want to calculate is\n\n$$P(D \\mid +),$$\n\nwhich is sort of the opposite of the sensitivity of the test. Fortunately, statistics has a convenient way to \"flip\" the conditional probability: **Bayes' Rule**.\n\n$$P(D \\mid +) = \\frac{P(+ \\mid D)P(D)}{P(+)} = \\frac{\\mathrm{sensitivity} \\cdot \\mathrm{prevalence}}{\\text{probability of testing positive}}$$\n\n\nSo, you see that there are two additional components here that we currently don't know: the prevalence of the disease, which we call $P(D)$, and the probability of testing positive on the test, $P(+)$.\n\nWe can use another trick to get $P(+)$ called the **law of total probability**:\n\n$$P(+) = P(+ \\mid D) P(D) + P(+ \\mid \\lnot D) P(\\lnot D).$$\n\n\nUsing some math, we can rewrite this. We know that $P(+ \\mid D)$ is the sensitivity, or true positive rate, so we can rease that $P(+ \\mid \\lnot D)$ is the true negative rate. Additionally, since we either have or don't have the disease (there is no other outcome), we know that $P(\\lnot D) = 1 - P(D)$, so we get\n\n$$P(+) = \\text{TPR} \\cdot P(D) + \\text{FPR} \\cdot (1 - P(D)).$$\n\n\nWe can get the false positive rate from the specificity by noting that, given you have a negative test, you must either have the disease or not (there are only these two options), so then\n\n$$1 = P(+ \\mid D) + P(+ \\mid \\lnot D) = \\mathrm{TPR} + \\mathrm{FPR}.$$\n\n\nTherefore, the false positive rate is $\\mathrm{TPR} = 1 - 0.99 = 0.01$. Now we just need to know the prevalence of disease. Of course, I had issues getting the Georgia Department of Public Health's tracker to work, but when I checked the CDC's COVID data tracker, there was a reported rate of 150.39 cases per 100,000 population, which works out to a prevalence percentage (cases per 100 people) of 0.15% or 0.0015.\n\nSo finally we can work out that\n\n$$P(+) = (0.85)(0.0015) + (0.01)(0.9985) = 0.00128 + 0.00999 \\approx 0.01270,$$\n\nor about $1.3\\%$. (For Athens-Clarke County, Georgia, on June 24, 2022.) Now that we have estimated the probability of a positive test in general, we can compute the value we actually want, which as I mentioned is called the **positive predictive value**.\n\nSo, given that we have a positive test, the probability of actually having COVID would be\n\n$$\\mathrm{PPV} = P(D \\mid +) = \\frac{P(+ \\mid D)P(D)}{P(+)} = \\frac{0.85\\cdot 0.0015}{0.0127} \\approx 0.1004 = 10.04\\%.$$\n\nThat might seem low, but of course your risk of having COVID (your personal $P(D)$) increases drastically if you've been around someone else who tested positive. Later on, I'll vary this number so we can see this effect in action.\n\nConversely, since you've already seen that I tested negative, we might want the **negative predictive value**: the probability of actually being negative, given that the test was negative. We compute this similarly, so I won't walk through all the steps this time. We have\n\n\n$$\\mathrm{NPV} = P(\\lnot D \\mid -) = \\frac{P(- \\mid \\lnot D)P(\\lnot D)}{P(-)} = \\frac{P(- \\mid \\lnot D)P(\\lnot D)}{P(- \\mid \\lnot D)P(\\lnot D) + P(- \\mid D)P(D)},$$\n\nwhich works out mathematically in the same way as the PPV, and we get\n\n$$\\mathrm{NPV} = \\frac{0.99 \\cdot 0.9985}{(0.99 \\cdot 0.9985) + (0.15\\cdot0.0015)} \\approx 0.9998 \\approx 99.8\\%.$$\n\nAgain, remember that this is heavily dependent on what we chose as the prevalence.\n\n# Bayesian Updating\n\nNow, what if we have two positive test results? Clearly, getting the probability that we have the disease given that we have two positive tests is more complicated than just multiplying the probability by 2 (if we kept doing that, we could get a probability larger than 1, which doesn't make sense).\n\nFortunately, Bayes' Rule lets us **update our beliefs** using the knowledge that we have. We can use our predicted probability that we have the disease from before **as our new probability**. That is, we'll repeat the same calculation, but this time we'll use a $P(D_{\\mathrm{new}}) = P(D \\mid +)$. Other than this, we leave the sensitivity and specificity alone--the only part we'll update in our new calculation is our probability than we have the disease.\n\n\n$$\\mathrm{PPV}_\\mathrm{new} = P(D \\mid +) = \\frac{P(+ \\mid D)P(D)}{P(+ \\mid D) P(D) + P(+ \\mid \\lnot D) P(\\lnot D)} = \\frac{0.85\\cdot 0.1004}{0.85\\cdot 0.1004 + 0.01 \\cdot 0.8996} \\approx 0.9046.$$\n\nWow! Just by taking one more test and updating our prior beliefs about the probability of the disease, the probability that we have the disease jumped from $10\\%$ to $90\\%$. We could continue taking tests, and calculating $P(D \\mid \\text{test result})$ as many times as we wanted, using this to update $P(D)$ in each round of testing.\n\n# Updating multiple times and varying $P(D)$\n\nLet's assume you both your Abbot binax NOW test in a pack of 2 (this is the packaging format that I got in the mail from the government). There are three options you can get: two negative tests, one positive and one negative test, and two positive tests.\n\n(In this case, getting a positive then a negative test will give you the same final probability as getting a negative then a positive test. This is not true for every Bayesian updating scenario in the world, but it is true for all simple binary diagnostic test examples like this one. For the simulation I'll do below, I'll leave in both because it's easier to code, and to convince you that it doesn't matter.)\n\nBased on the results we get, we are interested in estimating the probability that we have the disease, but to do so we need to choose what we think the original $P(D)$ is (our *prior probability* that we have the disease). Sometimes, the prevalence is a good choice. Many times, it isn't--for example, if you've been in a croweded supermarket with lots of people not wearing masks, your $P(D)$ increases with every second you spend in the store. So let's calculate our final probability after seeing the tests based on a spectrum of different prior $P(D)$ beliefs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <-\n\texpand.grid(\n\t\ttest1 = c(\"-\", \"+\"),\n\t\ttest2 = c(\"-\", \"+\"),\n\t\tp = seq(0, 1, length.out = 100000)\n\t)\n\ndf$pd_1 <- ifelse(\n\tdf$test1 == \"-\",\n\t# NPV = ( spec(1-p) ) / ( spec(1-p) + (1 - sens)(1-p) )\n\t1 - ((0.99 * (1 - df$p)) / (0.99 * (1 - df$p) + 0.15 * df$p)),\n\t# PPV = ( sens(p) ) / ( sens(p) + (1 - spec)(1-p) )\n\t(0.85 * df$p) / (0.85 * df$p + 0.01 * (1 - df$p))\n)\ndf$pd_2 <- ifelse(\n\tdf$test2 == \"-\",\n\t# NPV = ( spec(1-p) ) / ( spec(1-p) + (1 - sens)(1-p) )\n\t1 - ((0.99 * (1 - df$pd_1)) / (0.99 * (1 - df$pd_1) + 0.15 * df$pd_1)),\n\t# PPV = ( sens(p) ) / ( sens(p) + (1 - spec)(1-p) )\n\t(0.85 * df$pd_1) / (0.85 * df$pd_1 + 0.01 * (1 - df$pd_1))\n)\ndf$test_res <- paste0(\"(\", df$test1, \" and \", df$test2, \")\")\n\nintercepts <-\n\tdf |>\n\tgroup_by(test_res) |>\n\tsummarize(\n\t\ti = which.min(abs(pd_2 - 0.5)),\n\t\tx = p[i],\n\t\ty = 0.5,\n\t\t.groups = \"drop\"\n\t)\n```\n:::\n\n\nAnd we'll plot the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot( df, aes(x = p, y = pd_2) ) +\n\tgeom_line() +\n\tgeom_hline(yintercept = 0.5, lty = 2, color = \"red\") +\n\tgeom_vline(\n\t\tdata = intercepts,\n\t\taes(xintercept = x),\n\t\tlty = 2, color = \"red\"\n\t) +\n\tfacet_wrap(vars(test_res)) +\n\tlabs(x = \"\\nP(D) before taking either test\",\n\t\t y = \"P(D) after seeing both test results\\n\") +\n\ttheme_minimal(base_size = 20) +\n\ttheme(\n\t\taxis.text = element_text(color = \"black\"),\n\t\tstrip.text = element_text(face = \"bold\")\n\t)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nLet's also zoom in a bit so you can see the positive/positive results better.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot( df, aes(x = p, y = pd_2) ) +\n\tgeom_hline(yintercept = 0.5, lty = 2, color = \"red\") +\n\tgeom_line() +\n\t\tgeom_vline(\n\t\tdata = intercepts,\n\t\taes(xintercept = x),\n\t\tlty = 2, color = \"red\"\n\t) +\n\tfacet_wrap(vars(test_res)) +\n\tlabs(x = \"\\nP(D) before taking either test\",\n\t\t y = \"P(D) after seeing both test results\\n\") +\n\tcoord_cartesian(xlim = c(0, 0.1)) +\n\ttheme_minimal(base_size = 20) +\n\ttheme(\n\t\taxis.text = element_text(color = \"black\"),\n\t\tstrip.text = element_text(face = \"bold\")\n\t)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nInterestingly, we can see that one we have a positive test, our belief that we have COVID increases a lot, even with very small prior probabilities ($<10\\%$)! If we have two positive tests, it is very likely that we have COVID--this is due to the high specificity of the test (the test is unlikely to generate false positive results).\n\nFor two negative tests, the results do not change quite as steeply, due to the higher uncertainty--the test is more likely to make false negative results than false positives. However, unless my prior risk of COVID-19 is quite high, I can feel pretty comfortable saying I don't have COVID. But just in case, I'll isolate over the weekend and test again before going back to the office!\n\n## Last updated {.appendix}\n \n2022-06-24 12:50:12 EDT\n \n## Details {.appendix}\n\n[source code](https://github.com/wzbillings/zlog/tree/master/_posts/posts/2022-06-24_Bayes-Diagnostics/index.Rmd)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19044)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_United States.1252 \n[2] LC_CTYPE=English_United States.1252   \n[3] LC_MONETARY=English_United States.1252\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.1252    \n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] ggplot2_3.3.6 dplyr_1.0.9  \n\nloaded via a namespace (and not attached):\n [1] pillar_1.7.0     compiler_4.1.2   tools_4.1.2      digest_0.6.29   \n [5] jsonlite_1.8.0   evaluate_0.15    lifecycle_1.0.1  tibble_3.1.7    \n [9] gtable_0.3.0     pkgconfig_2.0.3  rlang_1.0.2      cli_3.3.0       \n[13] rstudioapi_0.13  yaml_2.3.5       xfun_0.31        fastmap_1.1.0   \n[17] withr_2.5.0      stringr_1.4.0    knitr_1.39       generics_0.1.2  \n[21] vctrs_0.4.1      grid_4.1.2       tidyselect_1.1.2 glue_1.6.2      \n[25] R6_2.5.1         fansi_1.0.3      rmarkdown_2.14   farver_2.1.0    \n[29] purrr_0.3.4      magrittr_2.0.3   scales_1.2.0     ellipsis_0.3.2  \n[33] htmltools_0.5.2  colorspace_2.0-3 renv_0.15.5      labeling_0.4.2  \n[37] utf8_1.2.2       stringi_1.7.6    munsell_0.5.0    crayon_1.5.1    \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}